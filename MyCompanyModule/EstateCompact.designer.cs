#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EstateDataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class EstateCompact : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgency(Agency instance);
    partial void UpdateAgency(Agency instance);
    partial void DeleteAgency(Agency instance);
    partial void InsertBalcony(Balcony instance);
    partial void UpdateBalcony(Balcony instance);
    partial void DeleteBalcony(Balcony instance);
    partial void InsertBorough(Borough instance);
    partial void UpdateBorough(Borough instance);
    partial void DeleteBorough(Borough instance);
    partial void InsertBuilding(Building instance);
    partial void UpdateBuilding(Building instance);
    partial void DeleteBuilding(Building instance);
    partial void InsertBuildingSery(BuildingSery instance);
    partial void UpdateBuildingSery(BuildingSery instance);
    partial void DeleteBuildingSery(BuildingSery instance);
    partial void InsertCeiling(Ceiling instance);
    partial void UpdateCeiling(Ceiling instance);
    partial void DeleteCeiling(Ceiling instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertConditionerSupply(ConditionerSupply instance);
    partial void UpdateConditionerSupply(ConditionerSupply instance);
    partial void DeleteConditionerSupply(ConditionerSupply instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertDistrict(District instance);
    partial void UpdateDistrict(District instance);
    partial void DeleteDistrict(District instance);
    partial void InsertDrainageSupply(DrainageSupply instance);
    partial void UpdateDrainageSupply(DrainageSupply instance);
    partial void DeleteDrainageSupply(DrainageSupply instance);
    partial void InsertGasSupply(GasSupply instance);
    partial void UpdateGasSupply(GasSupply instance);
    partial void DeleteGasSupply(GasSupply instance);
    partial void InsertHeatingSupply(HeatingSupply instance);
    partial void UpdateHeatingSupply(HeatingSupply instance);
    partial void DeleteHeatingSupply(HeatingSupply instance);
    partial void InsertMicrodistrict(Microdistrict instance);
    partial void UpdateMicrodistrict(Microdistrict instance);
    partial void DeleteMicrodistrict(Microdistrict instance);
    partial void InsertParking(Parking instance);
    partial void UpdateParking(Parking instance);
    partial void DeleteParking(Parking instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertRealtor(Realtor instance);
    partial void UpdateRealtor(Realtor instance);
    partial void DeleteRealtor(Realtor instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertRenovation(Renovation instance);
    partial void UpdateRenovation(Renovation instance);
    partial void DeleteRenovation(Renovation instance);
    partial void InsertStreet(Street instance);
    partial void UpdateStreet(Street instance);
    partial void DeleteStreet(Street instance);
    partial void InsertWallMaterial(WallMaterial instance);
    partial void UpdateWallMaterial(WallMaterial instance);
    partial void DeleteWallMaterial(WallMaterial instance);
    partial void InsertWaterSupply(WaterSupply instance);
    partial void UpdateWaterSupply(WaterSupply instance);
    partial void DeleteWaterSupply(WaterSupply instance);
    #endregion
		
		public EstateCompact(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EstateCompact(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EstateCompact(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EstateCompact(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Agency> Agencies
		{
			get
			{
				return this.GetTable<Agency>();
			}
		}
		
		public System.Data.Linq.Table<Balcony> Balconies
		{
			get
			{
				return this.GetTable<Balcony>();
			}
		}
		
		public System.Data.Linq.Table<Borough> Boroughs
		{
			get
			{
				return this.GetTable<Borough>();
			}
		}
		
		public System.Data.Linq.Table<Building> Buildings
		{
			get
			{
				return this.GetTable<Building>();
			}
		}
		
		public System.Data.Linq.Table<BuildingSery> BuildingSeries
		{
			get
			{
				return this.GetTable<BuildingSery>();
			}
		}
		
		public System.Data.Linq.Table<Ceiling> Ceilings
		{
			get
			{
				return this.GetTable<Ceiling>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<ConditionerSupply> ConditionerSupplies
		{
			get
			{
				return this.GetTable<ConditionerSupply>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<District> Districts
		{
			get
			{
				return this.GetTable<District>();
			}
		}
		
		public System.Data.Linq.Table<DrainageSupply> DrainageSupplies
		{
			get
			{
				return this.GetTable<DrainageSupply>();
			}
		}
		
		public System.Data.Linq.Table<GasSupply> GasSupplies
		{
			get
			{
				return this.GetTable<GasSupply>();
			}
		}
		
		public System.Data.Linq.Table<HeatingSupply> HeatingSupplies
		{
			get
			{
				return this.GetTable<HeatingSupply>();
			}
		}
		
		public System.Data.Linq.Table<Microdistrict> Microdistricts
		{
			get
			{
				return this.GetTable<Microdistrict>();
			}
		}
		
		public System.Data.Linq.Table<Parking> Parkings
		{
			get
			{
				return this.GetTable<Parking>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Realtor> Realtors
		{
			get
			{
				return this.GetTable<Realtor>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<Renovation> Renovations
		{
			get
			{
				return this.GetTable<Renovation>();
			}
		}
		
		public System.Data.Linq.Table<Street> Streets
		{
			get
			{
				return this.GetTable<Street>();
			}
		}
		
		public System.Data.Linq.Table<WallMaterial> WallMaterials
		{
			get
			{
				return this.GetTable<WallMaterial>();
			}
		}
		
		public System.Data.Linq.Table<WaterSupply> WaterSupplies
		{
			get
			{
				return this.GetTable<WaterSupply>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Agencies")]
	public partial class Agency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _CreationTime;
		
		private System.Nullable<System.DateTime> _LastUpdateTime;
		
		private System.Nullable<bool> _Enabled;
		
		private string _Name;
		
		private string _Phone;
		
		private string _Skype;
		
		private string _ICQ;
		
		private string _Address;
		
		private string _MapUrl;
		
		private string _SiteUrl;
		
		private System.Data.Linq.Binary _Logo;
		
		private System.Data.Linq.Binary _Passage;
		
		private string _About;
		
		private System.Nullable<System.DateTime> _Foundation;
		
		private string _Mail;
		
		private EntitySet<Realtor> _Realtors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreationTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationTimeChanged();
    partial void OnLastUpdateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateTimeChanged();
    partial void OnEnabledChanging(System.Nullable<bool> value);
    partial void OnEnabledChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnSkypeChanging(string value);
    partial void OnSkypeChanged();
    partial void OnICQChanging(string value);
    partial void OnICQChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnMapUrlChanging(string value);
    partial void OnMapUrlChanged();
    partial void OnSiteUrlChanging(string value);
    partial void OnSiteUrlChanged();
    partial void OnLogoChanging(System.Data.Linq.Binary value);
    partial void OnLogoChanged();
    partial void OnPassageChanging(System.Data.Linq.Binary value);
    partial void OnPassageChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    partial void OnFoundationChanging(System.Nullable<System.DateTime> value);
    partial void OnFoundationChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    #endregion
		
		public Agency()
		{
			this._Realtors = new EntitySet<Realtor>(new Action<Realtor>(this.attach_Realtors), new Action<Realtor>(this.detach_Realtors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateTime
		{
			get
			{
				return this._LastUpdateTime;
			}
			set
			{
				if ((this._LastUpdateTime != value))
				{
					this.OnLastUpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateTime = value;
					this.SendPropertyChanged("LastUpdateTime");
					this.OnLastUpdateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit")]
		public System.Nullable<bool> Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(100)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skype", DbType="NVarChar(100)")]
		public string Skype
		{
			get
			{
				return this._Skype;
			}
			set
			{
				if ((this._Skype != value))
				{
					this.OnSkypeChanging(value);
					this.SendPropertyChanging();
					this._Skype = value;
					this.SendPropertyChanged("Skype");
					this.OnSkypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICQ", DbType="NVarChar(100)")]
		public string ICQ
		{
			get
			{
				return this._ICQ;
			}
			set
			{
				if ((this._ICQ != value))
				{
					this.OnICQChanging(value);
					this.SendPropertyChanging();
					this._ICQ = value;
					this.SendPropertyChanged("ICQ");
					this.OnICQChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(512)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapUrl", DbType="NVarChar(512)")]
		public string MapUrl
		{
			get
			{
				return this._MapUrl;
			}
			set
			{
				if ((this._MapUrl != value))
				{
					this.OnMapUrlChanging(value);
					this.SendPropertyChanging();
					this._MapUrl = value;
					this.SendPropertyChanged("MapUrl");
					this.OnMapUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteUrl", DbType="NVarChar(100)")]
		public string SiteUrl
		{
			get
			{
				return this._SiteUrl;
			}
			set
			{
				if ((this._SiteUrl != value))
				{
					this.OnSiteUrlChanging(value);
					this.SendPropertyChanging();
					this._SiteUrl = value;
					this.SendPropertyChanged("SiteUrl");
					this.OnSiteUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passage", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Passage
		{
			get
			{
				return this._Passage;
			}
			set
			{
				if ((this._Passage != value))
				{
					this.OnPassageChanging(value);
					this.SendPropertyChanging();
					this._Passage = value;
					this.SendPropertyChanged("Passage");
					this.OnPassageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_About", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foundation", DbType="DateTime")]
		public System.Nullable<System.DateTime> Foundation
		{
			get
			{
				return this._Foundation;
			}
			set
			{
				if ((this._Foundation != value))
				{
					this.OnFoundationChanging(value);
					this.SendPropertyChanging();
					this._Foundation = value;
					this.SendPropertyChanged("Foundation");
					this.OnFoundationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="NVarChar(100)")]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agency_Realtor", Storage="_Realtors", ThisKey="ID", OtherKey="AgencyID")]
		public EntitySet<Realtor> Realtors
		{
			get
			{
				return this._Realtors;
			}
			set
			{
				this._Realtors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Realtors(Realtor entity)
		{
			this.SendPropertyChanging();
			entity.Agency = this;
		}
		
		private void detach_Realtors(Realtor entity)
		{
			this.SendPropertyChanging();
			entity.Agency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Balconies")]
	public partial class Balcony : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _ID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Balcony()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Boroughs")]
	public partial class Borough : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _CityID;
		
		private EntitySet<Microdistrict> _Microdistricts;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    #endregion
		
		public Borough()
		{
			this._Microdistricts = new EntitySet<Microdistrict>(new Action<Microdistrict>(this.attach_Microdistricts), new Action<Microdistrict>(this.detach_Microdistricts));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Borough_Microdistrict", Storage="_Microdistricts", ThisKey="ID", OtherKey="BoroughID")]
		public EntitySet<Microdistrict> Microdistricts
		{
			get
			{
				return this._Microdistricts;
			}
			set
			{
				this._Microdistricts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Borough", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Boroughs.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Boroughs.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Microdistricts(Microdistrict entity)
		{
			this.SendPropertyChanging();
			entity.Borough = this;
		}
		
		private void detach_Microdistricts(Microdistrict entity)
		{
			this.SendPropertyChanging();
			entity.Borough = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Buildings")]
	public partial class Building : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Num;
		
		private int _StreetID;
		
		private System.Nullable<int> _BoroughID;
		
		private System.Nullable<short> _StoreysNum;
		
		private System.Nullable<bool> _NewlyBuilt;
		
		private System.Nullable<int> _BuildingSeriesID;
		
		private System.Nullable<int> _WallMaterialID;
		
		private System.Nullable<int> _CeilingID;
		
		private System.Nullable<int> _ParkingID;
		
		private System.Nullable<int> _GasSupplyID;
		
		private System.Nullable<int> _HeatingSupplyID;
		
		private System.Nullable<int> _WaterSupplyID;
		
		private System.Nullable<int> _ConditionerSupplyID;
		
		private System.Nullable<int> _DrainageSupplyID;
		
		private System.Nullable<bool> _ElectricitySupply;
		
		private System.Nullable<bool> _TelephoneSupply;
		
		private System.Nullable<bool> _InternetSupply;
		
		private System.Nullable<bool> _TVSupply;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumChanging(string value);
    partial void OnNumChanged();
    partial void OnStreetIDChanging(int value);
    partial void OnStreetIDChanged();
    partial void OnBoroughIDChanging(System.Nullable<int> value);
    partial void OnBoroughIDChanged();
    partial void OnStoreysNumChanging(System.Nullable<short> value);
    partial void OnStoreysNumChanged();
    partial void OnNewlyBuiltChanging(System.Nullable<bool> value);
    partial void OnNewlyBuiltChanged();
    partial void OnBuildingSeriesIDChanging(System.Nullable<int> value);
    partial void OnBuildingSeriesIDChanged();
    partial void OnWallMaterialIDChanging(System.Nullable<int> value);
    partial void OnWallMaterialIDChanged();
    partial void OnCeilingIDChanging(System.Nullable<int> value);
    partial void OnCeilingIDChanged();
    partial void OnParkingIDChanging(System.Nullable<int> value);
    partial void OnParkingIDChanged();
    partial void OnGasSupplyIDChanging(System.Nullable<int> value);
    partial void OnGasSupplyIDChanged();
    partial void OnHeatingSupplyIDChanging(System.Nullable<int> value);
    partial void OnHeatingSupplyIDChanged();
    partial void OnWaterSupplyIDChanging(System.Nullable<int> value);
    partial void OnWaterSupplyIDChanged();
    partial void OnConditionerSupplyIDChanging(System.Nullable<int> value);
    partial void OnConditionerSupplyIDChanged();
    partial void OnDrainageSupplyIDChanging(System.Nullable<int> value);
    partial void OnDrainageSupplyIDChanged();
    partial void OnElectricitySupplyChanging(System.Nullable<bool> value);
    partial void OnElectricitySupplyChanged();
    partial void OnTelephoneSupplyChanging(System.Nullable<bool> value);
    partial void OnTelephoneSupplyChanged();
    partial void OnInternetSupplyChanging(System.Nullable<bool> value);
    partial void OnInternetSupplyChanged();
    partial void OnTVSupplyChanging(System.Nullable<bool> value);
    partial void OnTVSupplyChanged();
    #endregion
		
		public Building()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num", DbType="NVarChar(16)")]
		public string Num
		{
			get
			{
				return this._Num;
			}
			set
			{
				if ((this._Num != value))
				{
					this.OnNumChanging(value);
					this.SendPropertyChanging();
					this._Num = value;
					this.SendPropertyChanged("Num");
					this.OnNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetID", DbType="Int NOT NULL")]
		public int StreetID
		{
			get
			{
				return this._StreetID;
			}
			set
			{
				if ((this._StreetID != value))
				{
					this.OnStreetIDChanging(value);
					this.SendPropertyChanging();
					this._StreetID = value;
					this.SendPropertyChanged("StreetID");
					this.OnStreetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoroughID", DbType="Int")]
		public System.Nullable<int> BoroughID
		{
			get
			{
				return this._BoroughID;
			}
			set
			{
				if ((this._BoroughID != value))
				{
					this.OnBoroughIDChanging(value);
					this.SendPropertyChanging();
					this._BoroughID = value;
					this.SendPropertyChanged("BoroughID");
					this.OnBoroughIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StoreysNum", DbType="SmallInt")]
		public System.Nullable<short> StoreysNum
		{
			get
			{
				return this._StoreysNum;
			}
			set
			{
				if ((this._StoreysNum != value))
				{
					this.OnStoreysNumChanging(value);
					this.SendPropertyChanging();
					this._StoreysNum = value;
					this.SendPropertyChanged("StoreysNum");
					this.OnStoreysNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewlyBuilt", DbType="Bit")]
		public System.Nullable<bool> NewlyBuilt
		{
			get
			{
				return this._NewlyBuilt;
			}
			set
			{
				if ((this._NewlyBuilt != value))
				{
					this.OnNewlyBuiltChanging(value);
					this.SendPropertyChanging();
					this._NewlyBuilt = value;
					this.SendPropertyChanged("NewlyBuilt");
					this.OnNewlyBuiltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingSeriesID", DbType="Int")]
		public System.Nullable<int> BuildingSeriesID
		{
			get
			{
				return this._BuildingSeriesID;
			}
			set
			{
				if ((this._BuildingSeriesID != value))
				{
					this.OnBuildingSeriesIDChanging(value);
					this.SendPropertyChanging();
					this._BuildingSeriesID = value;
					this.SendPropertyChanged("BuildingSeriesID");
					this.OnBuildingSeriesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WallMaterialID", DbType="Int")]
		public System.Nullable<int> WallMaterialID
		{
			get
			{
				return this._WallMaterialID;
			}
			set
			{
				if ((this._WallMaterialID != value))
				{
					this.OnWallMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._WallMaterialID = value;
					this.SendPropertyChanged("WallMaterialID");
					this.OnWallMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CeilingID", DbType="Int")]
		public System.Nullable<int> CeilingID
		{
			get
			{
				return this._CeilingID;
			}
			set
			{
				if ((this._CeilingID != value))
				{
					this.OnCeilingIDChanging(value);
					this.SendPropertyChanging();
					this._CeilingID = value;
					this.SendPropertyChanged("CeilingID");
					this.OnCeilingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParkingID", DbType="Int")]
		public System.Nullable<int> ParkingID
		{
			get
			{
				return this._ParkingID;
			}
			set
			{
				if ((this._ParkingID != value))
				{
					this.OnParkingIDChanging(value);
					this.SendPropertyChanging();
					this._ParkingID = value;
					this.SendPropertyChanged("ParkingID");
					this.OnParkingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GasSupplyID", DbType="Int")]
		public System.Nullable<int> GasSupplyID
		{
			get
			{
				return this._GasSupplyID;
			}
			set
			{
				if ((this._GasSupplyID != value))
				{
					this.OnGasSupplyIDChanging(value);
					this.SendPropertyChanging();
					this._GasSupplyID = value;
					this.SendPropertyChanged("GasSupplyID");
					this.OnGasSupplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeatingSupplyID", DbType="Int")]
		public System.Nullable<int> HeatingSupplyID
		{
			get
			{
				return this._HeatingSupplyID;
			}
			set
			{
				if ((this._HeatingSupplyID != value))
				{
					this.OnHeatingSupplyIDChanging(value);
					this.SendPropertyChanging();
					this._HeatingSupplyID = value;
					this.SendPropertyChanged("HeatingSupplyID");
					this.OnHeatingSupplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaterSupplyID", DbType="Int")]
		public System.Nullable<int> WaterSupplyID
		{
			get
			{
				return this._WaterSupplyID;
			}
			set
			{
				if ((this._WaterSupplyID != value))
				{
					this.OnWaterSupplyIDChanging(value);
					this.SendPropertyChanging();
					this._WaterSupplyID = value;
					this.SendPropertyChanged("WaterSupplyID");
					this.OnWaterSupplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionerSupplyID", DbType="Int")]
		public System.Nullable<int> ConditionerSupplyID
		{
			get
			{
				return this._ConditionerSupplyID;
			}
			set
			{
				if ((this._ConditionerSupplyID != value))
				{
					this.OnConditionerSupplyIDChanging(value);
					this.SendPropertyChanging();
					this._ConditionerSupplyID = value;
					this.SendPropertyChanged("ConditionerSupplyID");
					this.OnConditionerSupplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrainageSupplyID", DbType="Int")]
		public System.Nullable<int> DrainageSupplyID
		{
			get
			{
				return this._DrainageSupplyID;
			}
			set
			{
				if ((this._DrainageSupplyID != value))
				{
					this.OnDrainageSupplyIDChanging(value);
					this.SendPropertyChanging();
					this._DrainageSupplyID = value;
					this.SendPropertyChanged("DrainageSupplyID");
					this.OnDrainageSupplyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectricitySupply", DbType="Bit")]
		public System.Nullable<bool> ElectricitySupply
		{
			get
			{
				return this._ElectricitySupply;
			}
			set
			{
				if ((this._ElectricitySupply != value))
				{
					this.OnElectricitySupplyChanging(value);
					this.SendPropertyChanging();
					this._ElectricitySupply = value;
					this.SendPropertyChanged("ElectricitySupply");
					this.OnElectricitySupplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneSupply", DbType="Bit")]
		public System.Nullable<bool> TelephoneSupply
		{
			get
			{
				return this._TelephoneSupply;
			}
			set
			{
				if ((this._TelephoneSupply != value))
				{
					this.OnTelephoneSupplyChanging(value);
					this.SendPropertyChanging();
					this._TelephoneSupply = value;
					this.SendPropertyChanged("TelephoneSupply");
					this.OnTelephoneSupplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternetSupply", DbType="Bit")]
		public System.Nullable<bool> InternetSupply
		{
			get
			{
				return this._InternetSupply;
			}
			set
			{
				if ((this._InternetSupply != value))
				{
					this.OnInternetSupplyChanging(value);
					this.SendPropertyChanging();
					this._InternetSupply = value;
					this.SendPropertyChanged("InternetSupply");
					this.OnInternetSupplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TVSupply", DbType="Bit")]
		public System.Nullable<bool> TVSupply
		{
			get
			{
				return this._TVSupply;
			}
			set
			{
				if ((this._TVSupply != value))
				{
					this.OnTVSupplyChanging(value);
					this.SendPropertyChanging();
					this._TVSupply = value;
					this.SendPropertyChanged("TVSupply");
					this.OnTVSupplyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="BuildingSeries")]
	public partial class BuildingSery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public BuildingSery()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Ceilings")]
	public partial class Ceiling : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Ceiling()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _DistrictID;
		
		private EntitySet<Borough> _Boroughs;
		
		private EntitySet<Street> _Streets;
		
		private EntityRef<District> _District;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDistrictIDChanging(int value);
    partial void OnDistrictIDChanged();
    #endregion
		
		public City()
		{
			this._Boroughs = new EntitySet<Borough>(new Action<Borough>(this.attach_Boroughs), new Action<Borough>(this.detach_Boroughs));
			this._Streets = new EntitySet<Street>(new Action<Street>(this.attach_Streets), new Action<Street>(this.detach_Streets));
			this._District = default(EntityRef<District>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictID", DbType="Int NOT NULL")]
		public int DistrictID
		{
			get
			{
				return this._DistrictID;
			}
			set
			{
				if ((this._DistrictID != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._DistrictID = value;
					this.SendPropertyChanged("DistrictID");
					this.OnDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Borough", Storage="_Boroughs", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<Borough> Boroughs
		{
			get
			{
				return this._Boroughs;
			}
			set
			{
				this._Boroughs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Street", Storage="_Streets", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<Street> Streets
		{
			get
			{
				return this._Streets;
			}
			set
			{
				this._Streets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_City", Storage="_District", ThisKey="DistrictID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._DistrictID = value.ID;
					}
					else
					{
						this._DistrictID = default(int);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boroughs(Borough entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Boroughs(Borough entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ConditionerSupplies")]
	public partial class ConditionerSupply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ConditionerSupply()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Region> _Regions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._Regions = new EntitySet<Region>(new Action<Region>(this.attach_Regions), new Action<Region>(this.detach_Regions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Region", Storage="_Regions", ThisKey="ID", OtherKey="CountryID")]
		public EntitySet<Region> Regions
		{
			get
			{
				return this._Regions;
			}
			set
			{
				this._Regions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Currencies")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<double> _Rate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRateChanging(System.Nullable<double> value);
    partial void OnRateChanged();
    #endregion
		
		public Currency()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float")]
		public System.Nullable<double> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Districts")]
	public partial class District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _RegionID;
		
		private EntitySet<City> _Cities;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public District()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_City", Storage="_Cities", ThisKey="ID", OtherKey="DistrictID")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_District", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Districts.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Districts.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="DrainageSupplies")]
	public partial class DrainageSupply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _ID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public DrainageSupply()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="GasSupplies")]
	public partial class GasSupply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public GasSupply()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HeatingSupplies")]
	public partial class HeatingSupply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public HeatingSupply()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Microdistricts")]
	public partial class Microdistrict : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _BoroughID;
		
		private EntityRef<Borough> _Borough;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBoroughIDChanging(int value);
    partial void OnBoroughIDChanged();
    #endregion
		
		public Microdistrict()
		{
			this._Borough = default(EntityRef<Borough>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoroughID", DbType="Int NOT NULL")]
		public int BoroughID
		{
			get
			{
				return this._BoroughID;
			}
			set
			{
				if ((this._BoroughID != value))
				{
					if (this._Borough.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBoroughIDChanging(value);
					this.SendPropertyChanging();
					this._BoroughID = value;
					this.SendPropertyChanged("BoroughID");
					this.OnBoroughIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Borough_Microdistrict", Storage="_Borough", ThisKey="BoroughID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public Borough Borough
		{
			get
			{
				return this._Borough.Entity;
			}
			set
			{
				Borough previousValue = this._Borough.Entity;
				if (((previousValue != value) 
							|| (this._Borough.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Borough.Entity = null;
						previousValue.Microdistricts.Remove(this);
					}
					this._Borough.Entity = value;
					if ((value != null))
					{
						value.Microdistricts.Add(this);
						this._BoroughID = value.ID;
					}
					else
					{
						this._BoroughID = default(int);
					}
					this.SendPropertyChanged("Borough");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Parkings")]
	public partial class Parking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Parking()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _ID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Permission()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Realtors")]
	public partial class Realtor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _CreationTime;
		
		private System.Nullable<System.DateTime> _LastUpdateTime;
		
		private int _AgencyID;
		
		private int _PermissionID;
		
		private string _Login;
		
		private string _Password;
		
		private System.Nullable<bool> _Enabled;
		
		private string _FIO;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<System.DateTime> _Commencement;
		
		private string _ContactPhone;
		
		private string _OfficePhone;
		
		private string _ICQ;
		
		private string _Skype;
		
		private string _Mail;
		
		private string _Info;
		
		private System.Nullable<int> _Remuneration;
		
		private string _Appointment;
		
		private System.Nullable<System.DateTime> _Discharge;
		
		private System.Data.Linq.Binary _Photo;
		
		private EntityRef<Agency> _Agency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreationTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationTimeChanged();
    partial void OnLastUpdateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateTimeChanged();
    partial void OnAgencyIDChanging(int value);
    partial void OnAgencyIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEnabledChanging(System.Nullable<bool> value);
    partial void OnEnabledChanged();
    partial void OnFIOChanging(string value);
    partial void OnFIOChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnCommencementChanging(System.Nullable<System.DateTime> value);
    partial void OnCommencementChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnOfficePhoneChanging(string value);
    partial void OnOfficePhoneChanged();
    partial void OnICQChanging(string value);
    partial void OnICQChanged();
    partial void OnSkypeChanging(string value);
    partial void OnSkypeChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnRemunerationChanging(System.Nullable<int> value);
    partial void OnRemunerationChanged();
    partial void OnAppointmentChanging(string value);
    partial void OnAppointmentChanged();
    partial void OnDischargeChanging(System.Nullable<System.DateTime> value);
    partial void OnDischargeChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    #endregion
		
		public Realtor()
		{
			this._Agency = default(EntityRef<Agency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateTime
		{
			get
			{
				return this._LastUpdateTime;
			}
			set
			{
				if ((this._LastUpdateTime != value))
				{
					this.OnLastUpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateTime = value;
					this.SendPropertyChanged("LastUpdateTime");
					this.OnLastUpdateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgencyID", DbType="Int NOT NULL")]
		public int AgencyID
		{
			get
			{
				return this._AgencyID;
			}
			set
			{
				if ((this._AgencyID != value))
				{
					if (this._Agency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgencyIDChanging(value);
					this.SendPropertyChanging();
					this._AgencyID = value;
					this.SendPropertyChanged("AgencyID");
					this.OnAgencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL")]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(100)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit")]
		public System.Nullable<bool> Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIO", DbType="NVarChar(100)")]
		public string FIO
		{
			get
			{
				return this._FIO;
			}
			set
			{
				if ((this._FIO != value))
				{
					this.OnFIOChanging(value);
					this.SendPropertyChanging();
					this._FIO = value;
					this.SendPropertyChanged("FIO");
					this.OnFIOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commencement", DbType="DateTime")]
		public System.Nullable<System.DateTime> Commencement
		{
			get
			{
				return this._Commencement;
			}
			set
			{
				if ((this._Commencement != value))
				{
					this.OnCommencementChanging(value);
					this.SendPropertyChanging();
					this._Commencement = value;
					this.SendPropertyChanged("Commencement");
					this.OnCommencementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="NVarChar(100)")]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficePhone", DbType="NVarChar(100)")]
		public string OfficePhone
		{
			get
			{
				return this._OfficePhone;
			}
			set
			{
				if ((this._OfficePhone != value))
				{
					this.OnOfficePhoneChanging(value);
					this.SendPropertyChanging();
					this._OfficePhone = value;
					this.SendPropertyChanged("OfficePhone");
					this.OnOfficePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ICQ", DbType="NVarChar(100)")]
		public string ICQ
		{
			get
			{
				return this._ICQ;
			}
			set
			{
				if ((this._ICQ != value))
				{
					this.OnICQChanging(value);
					this.SendPropertyChanging();
					this._ICQ = value;
					this.SendPropertyChanged("ICQ");
					this.OnICQChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Skype", DbType="NVarChar(100)")]
		public string Skype
		{
			get
			{
				return this._Skype;
			}
			set
			{
				if ((this._Skype != value))
				{
					this.OnSkypeChanging(value);
					this.SendPropertyChanging();
					this._Skype = value;
					this.SendPropertyChanged("Skype");
					this.OnSkypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="NVarChar(100)")]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remuneration", DbType="Int")]
		public System.Nullable<int> Remuneration
		{
			get
			{
				return this._Remuneration;
			}
			set
			{
				if ((this._Remuneration != value))
				{
					this.OnRemunerationChanging(value);
					this.SendPropertyChanging();
					this._Remuneration = value;
					this.SendPropertyChanged("Remuneration");
					this.OnRemunerationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment", DbType="NVarChar(100)")]
		public string Appointment
		{
			get
			{
				return this._Appointment;
			}
			set
			{
				if ((this._Appointment != value))
				{
					this.OnAppointmentChanging(value);
					this.SendPropertyChanging();
					this._Appointment = value;
					this.SendPropertyChanged("Appointment");
					this.OnAppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discharge", DbType="DateTime")]
		public System.Nullable<System.DateTime> Discharge
		{
			get
			{
				return this._Discharge;
			}
			set
			{
				if ((this._Discharge != value))
				{
					this.OnDischargeChanging(value);
					this.SendPropertyChanging();
					this._Discharge = value;
					this.SendPropertyChanged("Discharge");
					this.OnDischargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agency_Realtor", Storage="_Agency", ThisKey="AgencyID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public Agency Agency
		{
			get
			{
				return this._Agency.Entity;
			}
			set
			{
				Agency previousValue = this._Agency.Entity;
				if (((previousValue != value) 
							|| (this._Agency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agency.Entity = null;
						previousValue.Realtors.Remove(this);
					}
					this._Agency.Entity = value;
					if ((value != null))
					{
						value.Realtors.Add(this);
						this._AgencyID = value.ID;
					}
					else
					{
						this._AgencyID = default(int);
					}
					this.SendPropertyChanged("Agency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Regions")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _CountryID;
		
		private int _ID;
		
		private EntitySet<District> _Districts;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public Region()
		{
			this._Districts = new EntitySet<District>(new Action<District>(this.attach_Districts), new Action<District>(this.detach_Districts));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_District", Storage="_Districts", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<District> Districts
		{
			get
			{
				return this._Districts;
			}
			set
			{
				this._Districts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Region", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Regions.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Regions.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Districts(District entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Districts(District entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Renovations")]
	public partial class Renovation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Renovation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Streets")]
	public partial class Street : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _CityID;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    #endregion
		
		public Street()
		{
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Street", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Streets.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Streets.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="WallMaterials")]
	public partial class WallMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public WallMaterial()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="WaterSupplies")]
	public partial class WaterSupply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public WaterSupply()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
